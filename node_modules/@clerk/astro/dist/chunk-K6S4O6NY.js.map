{"version":3,"sources":["../src/stores/external.ts","../src/stores/internal.ts"],"sourcesContent":["import { deriveState } from '@clerk/shared/deriveState';\nimport { eventMethodCalled } from '@clerk/shared/telemetry';\nimport { batched, computed, onMount, type Store } from 'nanostores';\n\nimport { $clerk, $csrState, $initialState } from './internal';\n\n/**\n * A client side store that returns the loaded state of clerk-js.\n *\n * @example\n * $isLoadedStore.subscribe((authloaded => console.log(loaded))\n */\nexport const $isLoadedStore = computed([$csrState], state => state.isLoaded);\n\n/**\n * A client side store that is prepopulated with the authentication context during SSR.\n * It is a nanostore, for instructions on how to use nanostores please review the [documentation](https://github.com/nanostores/nanostores)\n *\n * @example\n * $authStore.subscribe((auth) => console.log(auth.userId))\n */\nexport const $authStore = batched([$csrState, $initialState], (state, initialState) => {\n  return deriveState(\n    state.isLoaded,\n    {\n      session: state.session,\n      user: state.user,\n      organization: state.organization,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      client: state.client!,\n    },\n    initialState,\n  );\n});\n\n/**\n * A client side store that is populated after clerk-js has loaded.\n * The store returns back the authenticated user or `null`.\n * It is a nanostore, for instructions on how to use nanostores please review the [documentation](https://github.com/nanostores/nanostores)\n *\n * @example\n * $userStore.subscribe((user) => console.log(user.id))\n */\nexport const $userStore = computed([$authStore], auth => auth.user);\n\n/**\n * A client side store that is populated after clerk-js has loaded.\n * The store returns the session of the authenticated user or `null`.\n * It is a nanostore, for instructions on how to use nanostores please review the [documentation](https://github.com/nanostores/nanostores)\n *\n * @example\n * $sessionStore.subscribe((session) => console.log(session.id))\n */\nexport const $sessionStore = computed([$authStore], auth => auth.session);\n\n/**\n * A client side store that is populated after clerk-js has loaded.\n * The store returns the active organization of the authenticated user or `null`.\n * It is a nanostore, for instructions on how to use nanostores please review the [documentation](https://github.com/nanostores/nanostores)\n *\n * @example\n * $organizationStore.subscribe((org) => console.log(org.id))\n */\nexport const $organizationStore = computed([$authStore], auth => auth.organization);\n\n/**\n * A client side store that is populated after clerk-js has loaded.\n * The store returns the clerk client or `null`.\n * It is a nanostore, for instructions on how to use nanostores please review the [documentation](https://github.com/nanostores/nanostores)\n *\n * @example\n * $clientStore.subscribe((client) => console.log(client.activeSessions))\n */\nexport const $clientStore = computed([$csrState], csr => csr.client);\n\n/**\n * A client side store that is populated after clerk-js is instanciated.\n * The store returns the clerk instance or `null`.\n * It is a nanostore, for instructions on how to use nanostores please review the [documentation](https://github.com/nanostores/nanostores)\n *\n * @example\n * $clerkStore.subscribe((clerk) => console.log(clerk.publishableKey))\n */\nexport const $clerkStore = computed([$clerk], clerk => clerk);\n\n/**\n * A client side store that is populated after clerk-js has loaded.\n * The store returns all the sessions of the current clerk client or `null`.\n * It is a nanostore, for instructions on how to use nanostores please review the [documentation](https://github.com/nanostores/nanostores)\n *\n * @example\n * $sessionListStore.subscribe((sessionList) => sessionList.map((session) => console.log('Session id:', sessino.id) ))\n */\nexport const $sessionListStore = computed([$clientStore], client => client?.sessions);\n\n/**\n * A client side store that is populated after clerk-js has loaded.\n * The store returns a `SignInResource` or `null`.\n * It is a nanostore, for instructions on how to use nanostores please review the [documentation](https://github.com/nanostores/nanostores)\n *\n * @example\n * $signInStore.subscribe((signIn) => console.log(signIn.status))\n */\nexport const $signInStore = computed([$clientStore], client => client?.signIn);\n\n/**\n * A client side store that is populated after clerk-js has loaded.\n * The store returns a `SignUpResource` or `null`.\n * It is a nanostore, for instructions on how to use nanostores please review the [documentation](https://github.com/nanostores/nanostores)\n *\n * @example\n * $signUpStore.subscribe((signUp) => console.log(signUp.status))\n */\nexport const $signUpStore = computed([$clientStore], client => client?.signUp);\n\n/**\n * Records a telemetry event when a store is used to match React hooks telemetry.\n *\n * @param {Store} store - The nanostore instance to monitor.\n * @param {string} method - The name of the method associated with the store usage.\n */\nconst recordTelemetryEvent = (store: Store, method: string) => {\n  onMount(store, () => {\n    $clerk.get()?.telemetry?.record(eventMethodCalled(method));\n  });\n};\n\nrecordTelemetryEvent($signInStore, '$signInStore');\nrecordTelemetryEvent($signUpStore, '$signUpStore');\nrecordTelemetryEvent($organizationStore, '$organizationStore');\n","import type {\n  Clerk,\n  ClientResource,\n  InitialState,\n  OrganizationResource,\n  SignedInSessionResource,\n  UserResource,\n} from '@clerk/types';\nimport { atom, map } from 'nanostores';\n\nexport const $csrState = map<{\n  isLoaded: boolean;\n  client: ClientResource | undefined | null;\n  user: UserResource | undefined | null;\n  session: SignedInSessionResource | undefined | null;\n  organization: OrganizationResource | undefined | null;\n}>({\n  isLoaded: false,\n  client: undefined,\n  user: undefined,\n  session: undefined,\n  organization: undefined,\n});\n\nexport const $initialState = map<InitialState>();\n\n// Use atom instead of `map` to prohibit key changes and allow only replacing the whole object\nexport const $clerk = atom<Clerk | null>(null);\n"],"mappings":";AAAA,SAAS,mBAAmB;AAC5B,SAAS,yBAAyB;AAClC,SAAS,SAAS,UAAU,eAA2B;;;ACMvD,SAAS,MAAM,WAAW;AAEnB,IAAM,YAAY,IAMtB;AAAA,EACD,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,SAAS;AAAA,EACT,cAAc;AAChB,CAAC;AAEM,IAAM,gBAAgB,IAAkB;AAGxC,IAAM,SAAS,KAAmB,IAAI;;;ADftC,IAAM,iBAAiB,SAAS,CAAC,SAAS,GAAG,WAAS,MAAM,QAAQ;AASpE,IAAM,aAAa,QAAQ,CAAC,WAAW,aAAa,GAAG,CAAC,OAAO,iBAAiB;AACrF,SAAO;AAAA,IACL,MAAM;AAAA,IACN;AAAA,MACE,SAAS,MAAM;AAAA,MACf,MAAM,MAAM;AAAA,MACZ,cAAc,MAAM;AAAA;AAAA,MAEpB,QAAQ,MAAM;AAAA,IAChB;AAAA,IACA;AAAA,EACF;AACF,CAAC;AAUM,IAAM,aAAa,SAAS,CAAC,UAAU,GAAG,UAAQ,KAAK,IAAI;AAU3D,IAAM,gBAAgB,SAAS,CAAC,UAAU,GAAG,UAAQ,KAAK,OAAO;AAUjE,IAAM,qBAAqB,SAAS,CAAC,UAAU,GAAG,UAAQ,KAAK,YAAY;AAU3E,IAAM,eAAe,SAAS,CAAC,SAAS,GAAG,SAAO,IAAI,MAAM;AAU5D,IAAM,cAAc,SAAS,CAAC,MAAM,GAAG,WAAS,KAAK;AAUrD,IAAM,oBAAoB,SAAS,CAAC,YAAY,GAAG,YAAU,QAAQ,QAAQ;AAU7E,IAAM,eAAe,SAAS,CAAC,YAAY,GAAG,YAAU,QAAQ,MAAM;AAUtE,IAAM,eAAe,SAAS,CAAC,YAAY,GAAG,YAAU,QAAQ,MAAM;AAQ7E,IAAM,uBAAuB,CAAC,OAAc,WAAmB;AAC7D,UAAQ,OAAO,MAAM;AACnB,WAAO,IAAI,GAAG,WAAW,OAAO,kBAAkB,MAAM,CAAC;AAAA,EAC3D,CAAC;AACH;AAEA,qBAAqB,cAAc,cAAc;AACjD,qBAAqB,cAAc,cAAc;AACjD,qBAAqB,oBAAoB,oBAAoB;","names":[]}