{"version":3,"sources":["../src/internal/create-clerk-instance.ts","../src/internal/invoke-clerk-astro-js-functions.ts","../src/internal/mount-clerk-astro-js-components.ts","../src/internal/run-once.ts"],"sourcesContent":["import { loadClerkJsScript, setClerkJsLoadingErrorPackageName } from '@clerk/shared/loadClerkJsScript';\nimport type { ClerkOptions } from '@clerk/types';\n\nimport { $clerkStore } from '../stores/external';\nimport { $clerk, $csrState } from '../stores/internal';\nimport type { AstroClerkCreateInstanceParams, AstroClerkUpdateOptions } from '../types';\nimport { invokeClerkAstroJSFunctions } from './invoke-clerk-astro-js-functions';\nimport { mountAllClerkAstroJSComponents } from './mount-clerk-astro-js-components';\nimport { runOnce } from './run-once';\n\nlet initOptions: ClerkOptions | undefined;\n\nsetClerkJsLoadingErrorPackageName(PACKAGE_NAME);\n\nfunction createNavigationHandler(\n  windowNav: typeof window.history.pushState | typeof window.history.replaceState,\n): Exclude<ClerkOptions['routerPush'], undefined> | Exclude<ClerkOptions['routerReplace'], undefined> {\n  return (to, opts) => {\n    if (opts?.__internal_metadata?.navigationType === 'internal') {\n      windowNav(history.state, '', to);\n    } else {\n      opts?.windowNavigate(to);\n    }\n  };\n}\n\n/**\n * Prevents firing clerk.load() multiple times\n */\nconst createClerkInstance = runOnce(createClerkInstanceInternal);\n\nasync function createClerkInstanceInternal(options?: AstroClerkCreateInstanceParams) {\n  let clerkJSInstance = window.Clerk;\n  if (!clerkJSInstance) {\n    await loadClerkJsScript(options);\n\n    if (!window.Clerk) {\n      throw new Error('Failed to download latest ClerkJS. Contact support@clerk.com.');\n    }\n    clerkJSInstance = window.Clerk;\n  }\n\n  if (!$clerk.get()) {\n    $clerk.set(clerkJSInstance);\n  }\n\n  initOptions = {\n    routerPush: createNavigationHandler(window.history.pushState.bind(window.history)),\n    routerReplace: createNavigationHandler(window.history.replaceState.bind(window.history)),\n    ...options,\n  };\n\n  return clerkJSInstance\n    .load(initOptions)\n    .then(() => {\n      $csrState.setKey('isLoaded', true);\n      // Notify subscribers that $clerkStore has been loaded.\n      // We're doing this because nanostores uses `===` for equality\n      // and just by setting the value to `window.Clerk` again won't trigger an update.\n      // We notify only once as this store is for advanced users.\n      $clerkStore.notify();\n\n      mountAllClerkAstroJSComponents();\n      invokeClerkAstroJSFunctions();\n\n      clerkJSInstance.addListener(payload => {\n        $csrState.setKey('client', payload.client);\n        $csrState.setKey('user', payload.user);\n        $csrState.setKey('session', payload.session);\n        $csrState.setKey('organization', payload.organization);\n      });\n    })\n    .catch(() => {});\n}\n\nfunction updateClerkOptions(options: AstroClerkUpdateOptions) {\n  const clerk = $clerk.get();\n  if (!clerk) {\n    throw new Error('Missing clerk instance');\n  }\n  // `__unstable__updateProps` is not exposed as public API from `@clerk/types`\n  void (clerk as any).__unstable__updateProps({\n    options: { ...initOptions, ...options },\n    appearance: { ...initOptions?.appearance, ...options.appearance },\n  });\n}\n\nexport { createClerkInstance, updateClerkOptions };\n","import { $clerk } from '../stores/internal';\n\n/**\n * Loop through any Astro component that has requested to invoke a function and invoke it with its respective props.\n */\nconst invokeClerkAstroJSFunctions = () => {\n  const functionNames = ['handleRedirectCallback'] as const;\n\n  functionNames.forEach(fnName => {\n    const elementsOfCategory = document.querySelectorAll(`[data-clerk-function-id^=\"clerk-${fnName}\"]`);\n    elementsOfCategory.forEach(el => {\n      const id = el.getAttribute('data-clerk-function-id');\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const props = window.__astro_clerk_function_props?.get(fnName)?.get(id!) ?? {};\n      void $clerk.get()?.[fnName]?.(props);\n    });\n  });\n};\n\nexport { invokeClerkAstroJSFunctions };\n","import type { Clerk } from '@clerk/types';\n\nimport { $clerk } from '../stores/internal';\nimport type { InternalUIComponentId } from '../types';\n\n/**\n * Loop through any Astro component that has requested to mount a UI component and mount it with its respective props.\n */\nconst mountAllClerkAstroJSComponents = () => {\n  const mountFns = {\n    'create-organization': 'mountCreateOrganization',\n    'organization-list': 'mountOrganizationList',\n    'organization-profile': 'mountOrganizationProfile',\n    'organization-switcher': 'mountOrganizationSwitcher',\n    'user-button': 'mountUserButton',\n    'user-profile': 'mountUserProfile',\n    'sign-in': 'mountSignIn',\n    'sign-up': 'mountSignUp',\n    'google-one-tap': 'openGoogleOneTap',\n    waitlist: 'mountWaitlist',\n    'pricing-table': 'mountPricingTable',\n  } as const satisfies Record<InternalUIComponentId, keyof Clerk>;\n\n  Object.entries(mountFns).forEach(([category, mountFn]) => {\n    const elementsOfCategory = document.querySelectorAll(`[data-clerk-id^=\"clerk-${category}\"]`);\n    elementsOfCategory.forEach(el => {\n      const clerkId = el.getAttribute('data-clerk-id') as string;\n      const props = window.__astro_clerk_component_props?.get(category)?.get(clerkId);\n      if (el) {\n        $clerk.get()?.[mountFn](el as HTMLDivElement, props);\n      }\n    });\n  });\n};\n\nexport { mountAllClerkAstroJSComponents };\n","import { invokeClerkAstroJSFunctions } from './invoke-clerk-astro-js-functions';\nimport { mountAllClerkAstroJSComponents } from './mount-clerk-astro-js-components';\nimport type { CreateClerkInstanceInternalFn } from './types';\n\n/**\n * Prevents mounting components multiple times when the `createClerkInstanceInternal` was been called twice without await first\n * This is useful as the \"integration\" may call the function twice at the same time.\n */\nconst runOnce = (onFirst: CreateClerkInstanceInternalFn) => {\n  let hasRun = false;\n  return (params: Parameters<CreateClerkInstanceInternalFn>[0]) => {\n    if (hasRun) {\n      const clerkJSInstance = window.Clerk;\n      return new Promise(res => {\n        if (!clerkJSInstance) {\n          return res(false);\n        }\n\n        if (clerkJSInstance.loaded) {\n          mountAllClerkAstroJSComponents();\n          invokeClerkAstroJSFunctions();\n        }\n        return res(clerkJSInstance.loaded);\n      });\n    }\n    /**\n     * Probably html streaming has delayed the component from mounting immediately.\n     * In Astro, js modules will start executing only after html streaming has ended.\n     */\n    hasRun = true;\n    return onFirst(params);\n  };\n};\n\nexport { runOnce };\n"],"mappings":"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","names":[]}