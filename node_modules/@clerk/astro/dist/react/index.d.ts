import * as react_jsx_runtime from 'react/jsx-runtime';
import { LoadedClerk, SignInButtonProps, SignOutOptions, SignUpButtonProps, SignInProps, SignUpProps, UserButtonProps, UserProfileProps, OrganizationProfileProps, OrganizationSwitcherProps, OrganizationListProps, GoogleOneTapProps, WaitlistProps, PricingTableProps, PendingSessionOptions, ProtectProps as ProtectProps$1, HandleOAuthCallbackParams, UseAuthReturn } from '@clerk/types';
export { SignInButtonProps, SignUpButtonProps } from '@clerk/types';
import React, { PropsWithChildren } from 'react';
import '../types-BVhZmUS2.js';

type WithClerkProp<T = unknown> = T & {
    clerk: LoadedClerk | undefined | null;
};

declare const SignInButton: {
    (props: Omit<WithClerkProp<React.PropsWithChildren<SignInButtonProps>>, "clerk">): react_jsx_runtime.JSX.Element;
    displayName: string;
};

type SignOutButtonProps = SignOutOptions & {
    children?: React.ReactNode;
};
declare const SignOutButton: {
    (props: Omit<React.PropsWithChildren<WithClerkProp<SignOutButtonProps>>, "clerk">): react_jsx_runtime.JSX.Element;
    displayName: string;
};

declare const SignUpButton: {
    (props: Omit<WithClerkProp<React.PropsWithChildren<SignUpButtonProps>>, "clerk">): react_jsx_runtime.JSX.Element;
    displayName: string;
};

interface OpenProps {
    open: ((props: any) => void) | undefined;
    close: (() => void) | undefined;
    props?: any;
}
interface MountProps {
    mount: ((node: HTMLDivElement, props: any) => void) | undefined;
    unmount: ((node: HTMLDivElement) => void) | undefined;
    updateProps?: (props: any) => void;
    props?: any;
}
declare const SignIn: {
    (props: Omit<WithClerkProp<SignInProps>, "clerk">): react_jsx_runtime.JSX.Element;
    displayName: string;
};
declare const SignUp: {
    (props: Omit<WithClerkProp<SignUpProps>, "clerk">): react_jsx_runtime.JSX.Element;
    displayName: string;
};
declare const UserButton: {
    (props: Omit<WithClerkProp<UserButtonProps>, "clerk">): react_jsx_runtime.JSX.Element;
    displayName: string;
};
declare const UserProfile: {
    (props: Omit<WithClerkProp<UserProfileProps>, "clerk">): react_jsx_runtime.JSX.Element;
    displayName: string;
};
declare const OrganizationProfile: {
    (props: Omit<WithClerkProp<OrganizationProfileProps>, "clerk">): react_jsx_runtime.JSX.Element;
    displayName: string;
};
declare const OrganizationSwitcher: {
    (props: Omit<WithClerkProp<OrganizationSwitcherProps>, "clerk">): react_jsx_runtime.JSX.Element;
    displayName: string;
};
declare const OrganizationList: {
    (props: Omit<WithClerkProp<OrganizationListProps>, "clerk">): react_jsx_runtime.JSX.Element;
    displayName: string;
};
declare const GoogleOneTap: {
    (props: Omit<WithClerkProp<GoogleOneTapProps>, "clerk">): react_jsx_runtime.JSX.Element;
    displayName: string;
};
declare const Waitlist: {
    (props: Omit<WithClerkProp<WaitlistProps>, "clerk">): react_jsx_runtime.JSX.Element;
    displayName: string;
};
declare const PricingTable: {
    (props: Omit<WithClerkProp<PricingTableProps>, "clerk">): react_jsx_runtime.JSX.Element;
    displayName: string;
};

declare function SignedOut({ children, treatPendingAsSignedOut }: PropsWithChildren<PendingSessionOptions>): React.ReactNode;
declare function SignedIn({ children, treatPendingAsSignedOut }: PropsWithChildren<PendingSessionOptions>): React.ReactNode;
declare const ClerkLoaded: ({ children }: React.PropsWithChildren) => JSX.Element | null;
declare const ClerkLoading: ({ children }: React.PropsWithChildren) => JSX.Element | null;
type ProtectProps = React.PropsWithChildren<ProtectProps$1 & {
    fallback?: React.ReactNode;
} & PendingSessionOptions>;
/**
 * Use `<Protect/>` in order to prevent unauthenticated or unauthorized users from accessing the children passed to the component.
 *
 * Examples:
 * ```
 * <Protect permission="a_permission_key" />
 * <Protect role="a_role_key" />
 * <Protect condition={(has) => has({permission:"a_permission_key"})} />
 * <Protect condition={(has) => has({role:"a_role_key"})} />
 * <Protect fallback={<p>Unauthorized</p>} />
 * ```
 */
declare const Protect: ({ children, fallback, treatPendingAsSignedOut, ...restAuthorizedParams }: ProtectProps) => react_jsx_runtime.JSX.Element | null;
/**
 * Use `<AuthenticateWithRedirectCallback/>` to complete a custom OAuth flow.
 */
declare const AuthenticateWithRedirectCallback: {
    (props: Omit<WithClerkProp<HandleOAuthCallbackParams>, "clerk">): react_jsx_runtime.JSX.Element;
    displayName: string;
};

type UseAuth = (options?: PendingSessionOptions) => UseAuthReturn;
/**
 * Returns the current auth state, the user and session ids and the `getToken`
 * that can be used to retrieve the given template or the default Clerk token.
 *
 * Until Clerk loads, `isLoaded` will be set to `false`.
 * Once Clerk loads, `isLoaded` will be set to `true`, and you can
 * safely access the `userId` and `sessionId` variables.
 *
 * For projects using a server, you can have immediate access to this data during SSR.
 *
 * @example
 * function Hello() {
 *   const { isSignedIn, sessionId, userId } = useAuth();
 *   if(isSignedIn) {
 *     return null;
 *   }
 *   console.log(sessionId, userId)
 *   return <div>...</div>
 * }
 *
 * This page will be fully rendered during SSR:
 * @example
 * export HelloPage = () => {
 *   const { isSignedIn, sessionId, userId } = useAuth();
 *   console.log(isSignedIn, sessionId, userId)
 *   return <div>...</div>
 * }
 */
declare const useAuth: UseAuth;

export { AuthenticateWithRedirectCallback, ClerkLoaded, ClerkLoading, GoogleOneTap, type MountProps, type OpenProps, OrganizationList, OrganizationProfile, OrganizationSwitcher, PricingTable, Protect, type ProtectProps, SignIn, SignInButton, SignOutButton, type SignOutButtonProps, SignUp, SignUpButton, SignedIn, SignedOut, UserButton, UserProfile, Waitlist, useAuth };
