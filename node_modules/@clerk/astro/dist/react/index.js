import {
  $authStore,
  $clerk,
  $clerkStore,
  $csrState
} from "../chunk-K6S4O6NY.js";

// src/react/SignInButton.tsx
import React2 from "react";

// src/react/utils.tsx
import { computed } from "nanostores";
import React from "react";
import { jsx } from "react/jsx-runtime";
function useStore(store) {
  const get = store.get.bind(store);
  return React.useSyncExternalStore(store.listen, get, get);
}
var withClerk = (Component, displayName) => {
  displayName = displayName || Component.displayName || Component.name || "Component";
  Component.displayName = displayName;
  const HOC = (props) => {
    const clerk = useStore(
      computed([$csrState, $clerk], (state, clerk2) => {
        return state.isLoaded ? clerk2 : null;
      })
    );
    return /* @__PURE__ */ jsx(
      Component,
      {
        ...props,
        clerk
      },
      clerk ? "a" : "b"
    );
  };
  HOC.displayName = `withClerk(${displayName})`;
  return HOC;
};
var assertSingleChild = (children) => (name) => {
  try {
    return React.Children.only(children);
  } catch {
    return `You've passed multiple children components to <${name}/>. You can only pass a single child component or text.`;
  }
};
var normalizeWithDefaultValue = (children, defaultText) => {
  if (!children) {
    children = defaultText;
  }
  if (typeof children === "string") {
    children = /* @__PURE__ */ jsx("button", { type: "button", children });
  }
  return children;
};
var safeExecute = (cb) => (...args) => {
  if (cb && typeof cb === "function") {
    return cb(...args);
  }
};

// src/react/SignInButton.tsx
var SignInButton = withClerk(
  ({ clerk, children, ...props }) => {
    const { signUpFallbackRedirectUrl, forceRedirectUrl, fallbackRedirectUrl, signUpForceRedirectUrl, mode, ...rest } = props;
    children = normalizeWithDefaultValue(children, "Sign in");
    const child = assertSingleChild(children)("SignInButton");
    const clickHandler = () => {
      const opts = {
        forceRedirectUrl,
        fallbackRedirectUrl,
        signUpFallbackRedirectUrl,
        signUpForceRedirectUrl
      };
      if (!clerk) {
        return;
      }
      if (mode === "modal") {
        return clerk.openSignIn({ ...opts, appearance: props.appearance });
      }
      return clerk.redirectToSignIn({
        ...opts,
        signInFallbackRedirectUrl: fallbackRedirectUrl,
        signInForceRedirectUrl: forceRedirectUrl
      });
    };
    const wrappedChildClickHandler = async (e) => {
      if (child && typeof child === "object" && "props" in child) {
        await safeExecute(child.props.onClick)(e);
      }
      return clickHandler();
    };
    const childProps = { ...rest, onClick: wrappedChildClickHandler };
    return React2.cloneElement(child, childProps);
  },
  "SignInButton"
);

// src/react/SignOutButton.tsx
import React3 from "react";
var SignOutButton = withClerk(
  ({ clerk, children, ...props }) => {
    const { redirectUrl = "/", sessionId, ...rest } = props;
    children = normalizeWithDefaultValue(children, "Sign out");
    const child = assertSingleChild(children)("SignOutButton");
    const clickHandler = () => clerk?.signOut({ redirectUrl, sessionId });
    const wrappedChildClickHandler = async (e) => {
      if (child && typeof child === "object" && "props" in child) {
        await safeExecute(child.props.onClick)(e);
      }
      return clickHandler();
    };
    const childProps = { ...rest, onClick: wrappedChildClickHandler };
    return React3.cloneElement(child, childProps);
  },
  "SignOutButton"
);

// src/react/SignUpButton.tsx
import React4 from "react";
var SignUpButton = withClerk(
  ({ clerk, children, ...props }) => {
    const {
      fallbackRedirectUrl,
      forceRedirectUrl,
      signInFallbackRedirectUrl,
      signInForceRedirectUrl,
      mode,
      unsafeMetadata,
      ...rest
    } = props;
    children = normalizeWithDefaultValue(children, "Sign up");
    const child = assertSingleChild(children)("SignUpButton");
    const clickHandler = () => {
      const opts = {
        fallbackRedirectUrl,
        forceRedirectUrl,
        signInFallbackRedirectUrl,
        signInForceRedirectUrl,
        unsafeMetadata
      };
      if (!clerk) {
        return;
      }
      if (mode === "modal") {
        return clerk.openSignUp({ ...opts, appearance: props.appearance });
      }
      return clerk.redirectToSignUp({
        ...opts,
        signUpFallbackRedirectUrl: fallbackRedirectUrl,
        signUpForceRedirectUrl: forceRedirectUrl
      });
    };
    const wrappedChildClickHandler = async (e) => {
      if (child && typeof child === "object" && "props" in child) {
        await safeExecute(child.props.onClick)(e);
      }
      return clickHandler();
    };
    const childProps = { ...rest, onClick: wrappedChildClickHandler };
    return React4.cloneElement(child, childProps);
  },
  "SignUpButton"
);

// src/react/uiComponents.tsx
import React5 from "react";
import { Fragment, jsx as jsx2 } from "react/jsx-runtime";
var isMountProps = (props) => {
  return "mount" in props;
};
var isOpenProps = (props) => {
  return "open" in props;
};
var Portal = class extends React5.PureComponent {
  portalRef = React5.createRef();
  componentDidUpdate(prevProps) {
    if (!isMountProps(prevProps) || !isMountProps(this.props)) {
      return;
    }
    if (prevProps.props.appearance !== this.props.props.appearance || prevProps.props?.customPages?.length !== this.props.props?.customPages?.length) {
      this.props.updateProps?.({
        node: this.portalRef.current,
        props: this.props.props
      });
    }
  }
  componentDidMount() {
    if (this.portalRef.current) {
      if (isMountProps(this.props)) {
        this.props.mount?.(this.portalRef.current, this.props.props);
      }
      if (isOpenProps(this.props)) {
        this.props.open?.(this.props.props);
      }
    }
  }
  componentWillUnmount() {
    if (this.portalRef.current) {
      if (isMountProps(this.props)) {
        this.props.unmount?.(this.portalRef.current);
      }
      if (isOpenProps(this.props)) {
        this.props.close?.();
      }
    }
  }
  render() {
    return /* @__PURE__ */ jsx2(Fragment, { children: /* @__PURE__ */ jsx2("div", { ref: this.portalRef }) });
  }
};
var SignIn = withClerk(({ clerk, ...props }) => {
  return /* @__PURE__ */ jsx2(
    Portal,
    {
      mount: clerk?.mountSignIn,
      unmount: clerk?.unmountSignIn,
      updateProps: clerk?.__unstable__updateProps,
      props
    }
  );
}, "SignIn");
var SignUp = withClerk(({ clerk, ...props }) => {
  return /* @__PURE__ */ jsx2(
    Portal,
    {
      mount: clerk?.mountSignUp,
      unmount: clerk?.unmountSignUp,
      updateProps: clerk?.__unstable__updateProps,
      props
    }
  );
}, "SignUp");
var UserButton = withClerk(({ clerk, ...props }) => {
  return /* @__PURE__ */ jsx2(
    Portal,
    {
      mount: clerk?.mountUserButton,
      unmount: clerk?.unmountUserButton,
      updateProps: clerk?.__unstable__updateProps,
      props
    }
  );
}, "UserButton");
var UserProfile = withClerk(({ clerk, ...props }) => {
  return /* @__PURE__ */ jsx2(
    Portal,
    {
      mount: clerk?.mountUserProfile,
      unmount: clerk?.unmountUserProfile,
      updateProps: clerk?.__unstable__updateProps,
      props
    }
  );
}, "UserProfile");
var OrganizationProfile = withClerk(({ clerk, ...props }) => {
  return /* @__PURE__ */ jsx2(
    Portal,
    {
      mount: clerk?.mountOrganizationProfile,
      unmount: clerk?.unmountOrganizationProfile,
      updateProps: clerk?.__unstable__updateProps,
      props
    }
  );
}, "OrganizationProfile");
var OrganizationSwitcher = withClerk(({ clerk, ...props }) => {
  return /* @__PURE__ */ jsx2(
    Portal,
    {
      mount: clerk?.mountOrganizationSwitcher,
      unmount: clerk?.unmountOrganizationSwitcher,
      updateProps: clerk?.__unstable__updateProps,
      props
    }
  );
}, "OrganizationSwitcher");
var OrganizationList = withClerk(({ clerk, ...props }) => {
  return /* @__PURE__ */ jsx2(
    Portal,
    {
      mount: clerk?.mountOrganizationList,
      unmount: clerk?.unmountOrganizationList,
      updateProps: clerk?.__unstable__updateProps,
      props
    }
  );
}, "OrganizationList");
var GoogleOneTap = withClerk(({ clerk, ...props }) => {
  return /* @__PURE__ */ jsx2(
    Portal,
    {
      open: clerk?.openGoogleOneTap,
      close: clerk?.closeGoogleOneTap,
      props
    }
  );
}, "GoogleOneTap");
var Waitlist = withClerk(({ clerk, ...props }) => {
  return /* @__PURE__ */ jsx2(
    Portal,
    {
      mount: clerk?.mountWaitlist,
      unmount: clerk?.unmountWaitlist,
      props
    }
  );
}, "Waitlist");
var PricingTable = withClerk(({ clerk, ...props }) => {
  return /* @__PURE__ */ jsx2(
    Portal,
    {
      mount: clerk?.mountPricingTable,
      unmount: clerk?.unmountPricingTable,
      props
    }
  );
}, "PricingTable");

// src/react/controlComponents.tsx
import { computed as computed2 } from "nanostores";
import React6, { useEffect, useState } from "react";

// src/react/hooks.ts
import { createCheckAuthorization, resolveAuthState } from "@clerk/shared/authorization";
import { deriveState } from "@clerk/shared/deriveState";
import { useCallback, useSyncExternalStore } from "react";
import { authAsyncStorage } from "#async-local-storage";
var clerkLoaded = () => {
  return new Promise((resolve) => {
    $csrState.subscribe(({ isLoaded }) => {
      if (isLoaded) {
        resolve($clerk.get());
      }
    });
  });
};
var createGetToken = () => {
  return async (options) => {
    const clerk = await clerkLoaded();
    if (!clerk.session) {
      return null;
    }
    return clerk.session.getToken(options);
  };
};
var createSignOut = () => {
  return async (...args) => {
    const clerk = await clerkLoaded();
    return clerk.signOut(...args);
  };
};
var useAuth = ({ treatPendingAsSignedOut } = {}) => {
  const authContext = useAuthStore();
  const clerkContext = useStore2($clerkStore);
  const getToken = useCallback(createGetToken(), []);
  const signOut = useCallback(createSignOut(), []);
  const { userId, orgId, orgRole, orgPermissions, factorVerificationAge, sessionClaims } = authContext;
  const has = useCallback(
    (params) => {
      return createCheckAuthorization({
        userId,
        orgId,
        orgRole,
        orgPermissions,
        factorVerificationAge,
        features: sessionClaims?.fea || "",
        plans: sessionClaims?.pla || ""
      })(params);
    },
    [userId, orgId, orgRole, orgPermissions, factorVerificationAge, sessionClaims]
  );
  const payload = resolveAuthState({
    authObject: {
      ...authContext,
      getToken,
      signOut,
      has
    },
    options: {
      treatPendingAsSignedOut: (
        // Fallback from option provided via SSR / CSR contexts
        treatPendingAsSignedOut ?? clerkContext?.__internal_getOption?.("treatPendingAsSignedOut") ?? import.meta.env.PUBLIC_CLERK_TREAT_PENDING_AS_SIGNED_OUT
      )
    }
  });
  if (!payload) {
    throw new Error("Invalid state. Feel free to submit a bug or reach out to support");
  }
  return payload;
};
function useStore2(store, getServerSnapshot) {
  const get = store.get.bind(store);
  return useSyncExternalStore(store.listen, get, getServerSnapshot || get);
}
function useAuthStore() {
  const get = $authStore.get.bind($authStore);
  return useStore2($authStore, () => {
    if (typeof window === "undefined") {
      return deriveState(
        false,
        {
          user: null,
          session: null,
          client: null,
          organization: null
        },
        authAsyncStorage.getStore()
      );
    }
    return get();
  });
}

// src/react/controlComponents.tsx
import { Fragment as Fragment2, jsx as jsx3 } from "react/jsx-runtime";
function SignedOut({ children, treatPendingAsSignedOut }) {
  const { userId } = useAuth({ treatPendingAsSignedOut });
  if (userId) {
    return null;
  }
  return children;
}
function SignedIn({ children, treatPendingAsSignedOut }) {
  const { userId } = useAuth({ treatPendingAsSignedOut });
  if (!userId) {
    return null;
  }
  return children;
}
var $isLoadingClerkStore = computed2($csrState, (state) => state.isLoaded);
var useSafeIsLoaded = () => {
  const [isLoaded, setIsLoaded] = useState(false);
  useEffect(() => {
    const unsub = $isLoadingClerkStore.subscribe(() => {
      setIsLoaded(true);
    });
    return () => unsub();
  }, []);
  return isLoaded;
};
var ClerkLoaded = ({ children }) => {
  const isLoaded = useSafeIsLoaded();
  if (!isLoaded) {
    return null;
  }
  return /* @__PURE__ */ jsx3(Fragment2, { children });
};
var ClerkLoading = ({ children }) => {
  const isLoaded = useSafeIsLoaded();
  if (isLoaded) {
    return null;
  }
  return /* @__PURE__ */ jsx3(Fragment2, { children });
};
var Protect = ({ children, fallback, treatPendingAsSignedOut, ...restAuthorizedParams }) => {
  const { isLoaded, has, userId } = useAuth({ treatPendingAsSignedOut });
  if (!isLoaded) {
    return null;
  }
  const unauthorized = /* @__PURE__ */ jsx3(Fragment2, { children: fallback ?? null });
  const authorized = /* @__PURE__ */ jsx3(Fragment2, { children });
  if (!userId) {
    return unauthorized;
  }
  if (typeof restAuthorizedParams.condition === "function") {
    if (restAuthorizedParams.condition(has)) {
      return authorized;
    }
    return unauthorized;
  }
  if (restAuthorizedParams.role || restAuthorizedParams.permission || restAuthorizedParams.feature || restAuthorizedParams.plan) {
    if (has?.(restAuthorizedParams)) {
      return authorized;
    }
    return unauthorized;
  }
  return authorized;
};
var AuthenticateWithRedirectCallback = withClerk(
  ({ clerk, ...handleRedirectCallbackParams }) => {
    React6.useEffect(() => {
      void clerk?.handleRedirectCallback(handleRedirectCallbackParams);
    }, []);
    return null;
  },
  "AuthenticateWithRedirectCallback"
);
export {
  AuthenticateWithRedirectCallback,
  ClerkLoaded,
  ClerkLoading,
  GoogleOneTap,
  OrganizationList,
  OrganizationProfile,
  OrganizationSwitcher,
  PricingTable,
  Protect,
  SignIn,
  SignInButton,
  SignOutButton,
  SignUp,
  SignUpButton,
  SignedIn,
  SignedOut,
  UserButton,
  UserProfile,
  Waitlist,
  useAuth
};
//# sourceMappingURL=index.js.map