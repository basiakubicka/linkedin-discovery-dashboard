{"version":3,"sources":["../../src/server/index.ts","../../src/server/clerk-middleware.ts","../../src/server/build-clerk-hotload-script.ts","../../src/server/get-safe-env.ts","../../src/server/clerk-client.ts","../../src/server/get-auth.ts","../../src/server/utils.ts","../../src/server/current-user.ts","../../src/server/server-redirect-with-auth.ts","../../src/server/route-matcher.ts"],"sourcesContent":["/**\n * Re-export utilities\n */\nexport { verifyToken, createClerkClient } from '@clerk/backend';\n\n/**\n * Re-export types\n */\nexport type {\n  OrganizationMembershipRole,\n  // Webhook event types\n  WebhookEvent,\n  WebhookEventType,\n  // Resources\n  AllowlistIdentifier,\n  Client,\n  EmailAddress,\n  ExternalAccount,\n  Invitation,\n  OauthAccessToken,\n  Organization,\n  OrganizationDomain,\n  OrganizationInvitation,\n  OrganizationMembership,\n  OrganizationMembershipPublicUserData,\n  PhoneNumber,\n  Session,\n  SignInToken,\n  SMSMessage,\n  Token,\n  User,\n} from '@clerk/backend';\n\nexport { clerkMiddleware } from './clerk-middleware';\nexport { createRouteMatcher } from './route-matcher';\nexport { clerkClient } from './clerk-client';\n\n/**\n * This will be used to define types of Astro.Locals inside `env.d.ts`\n */\nexport type { GetAuthReturn } from './get-auth';\n","import type { ClerkClient } from '@clerk/backend';\nimport type {\n  AuthenticateRequestOptions,\n  ClerkRequest,\n  RedirectFun,\n  RequestState,\n  SignedInAuthObject,\n  SignedOutAuthObject,\n} from '@clerk/backend/internal';\nimport { AuthStatus, constants, createClerkRequest, createRedirect } from '@clerk/backend/internal';\nimport { isDevelopmentFromSecretKey } from '@clerk/shared/keys';\nimport { handleNetlifyCacheInDevInstance } from '@clerk/shared/netlifyCacheHandler';\nimport { isHttpOrHttps } from '@clerk/shared/proxy';\nimport { handleValueOrFn } from '@clerk/shared/utils';\nimport type { PendingSessionOptions } from '@clerk/types';\nimport type { APIContext } from 'astro';\n\nimport { authAsyncStorage } from '#async-local-storage';\n\nimport { buildClerkHotloadScript } from './build-clerk-hotload-script';\nimport { clerkClient } from './clerk-client';\nimport { createCurrentUser } from './current-user';\nimport { getAuth } from './get-auth';\nimport { getClientSafeEnv, getSafeEnv } from './get-safe-env';\nimport { serverRedirectWithAuth } from './server-redirect-with-auth';\nimport type {\n  AstroMiddleware,\n  AstroMiddlewareContextParam,\n  AstroMiddlewareNextParam,\n  AstroMiddlewareReturn,\n} from './types';\nimport { isRedirect, setHeader } from './utils';\n\nconst CONTROL_FLOW_ERROR = {\n  REDIRECT_TO_SIGN_IN: 'CLERK_PROTECT_REDIRECT_TO_SIGN_IN',\n};\n\ntype ClerkMiddlewareAuthObject = (SignedInAuthObject | SignedOutAuthObject) & {\n  redirectToSignIn: (opts?: { returnBackUrl?: URL | string | null }) => Response;\n};\n\ntype ClerkAstroMiddlewareHandler = (\n  auth: () => ClerkMiddlewareAuthObject,\n  context: AstroMiddlewareContextParam,\n  next: AstroMiddlewareNextParam,\n) => AstroMiddlewareReturn | undefined;\n\ntype ClerkAstroMiddlewareOptions = AuthenticateRequestOptions;\n\n/**\n * Middleware for Astro that handles authentication and authorization with Clerk.\n */\ninterface ClerkMiddleware {\n  /**\n   * @example\n   * export default clerkMiddleware((auth, context, next) => { ... }, options);\n   */\n  (handler: ClerkAstroMiddlewareHandler, options?: ClerkAstroMiddlewareOptions): AstroMiddleware;\n\n  /**\n   * @example\n   * export default clerkMiddleware(options);\n   */\n  (options?: ClerkAstroMiddlewareOptions): AstroMiddleware;\n}\n\nexport const clerkMiddleware: ClerkMiddleware = (...args: unknown[]): any => {\n  const [handler, options] = parseHandlerAndOptions(args);\n\n  const astroMiddleware: AstroMiddleware = async (context, next) => {\n    // if the current page is prerendered, do nothing\n    if (isPrerenderedPage(context)) {\n      return next();\n    }\n\n    const clerkRequest = createClerkRequest(context.request);\n\n    const requestState = await clerkClient(context).authenticateRequest(\n      clerkRequest,\n      createAuthenticateRequestOptions(clerkRequest, options, context),\n    );\n\n    const locationHeader = requestState.headers.get(constants.Headers.Location);\n    if (locationHeader) {\n      handleNetlifyCacheInDevInstance({\n        locationHeader,\n        requestStateHeaders: requestState.headers,\n        publishableKey: requestState.publishableKey,\n      });\n\n      const res = new Response(null, { status: 307, headers: requestState.headers });\n      return decorateResponseWithObservabilityHeaders(res, requestState);\n    } else if (requestState.status === AuthStatus.Handshake) {\n      throw new Error('Clerk: handshake status without redirect');\n    }\n\n    const authObject = requestState.toAuth();\n\n    const redirectToSignIn = createMiddlewareRedirectToSignIn(clerkRequest);\n    const authObjWithMethods: ClerkMiddlewareAuthObject = Object.assign(authObject, { redirectToSignIn });\n\n    decorateAstroLocal(clerkRequest, context, requestState);\n\n    /**\n     * ALS is crucial for guaranteeing SSR in UI frameworks like React.\n     * This currently powers the `useAuth()` React hook and any other hook or Component that depends on it.\n     */\n    return authAsyncStorage.run(context.locals.auth(), async () => {\n      /**\n       * Generate SSR page\n       */\n      let handlerResult: Response;\n      try {\n        handlerResult = (await handler?.(() => authObjWithMethods, context, next)) || (await next());\n      } catch (e: any) {\n        handlerResult = handleControlFlowErrors(e, clerkRequest, requestState, context);\n      }\n\n      if (isRedirect(handlerResult)) {\n        return serverRedirectWithAuth(context, clerkRequest, handlerResult, options);\n      }\n\n      const response = decorateRequest(context.locals, handlerResult);\n      if (requestState.headers) {\n        requestState.headers.forEach((value, key) => {\n          response.headers.append(key, value);\n        });\n      }\n\n      return response;\n    });\n  };\n\n  return astroMiddleware;\n};\n\nconst isPrerenderedPage = (context: APIContext) => {\n  return (\n    // for Astro v5\n    ('isPrerendered' in context && context.isPrerendered) ||\n    // for Astro v4\n    ('_isPrerendered' in context && context._isPrerendered)\n  );\n};\n\n// TODO-SHARED: Duplicate from '@clerk/nextjs'\nconst parseHandlerAndOptions = (args: unknown[]) => {\n  return [\n    typeof args[0] === 'function' ? args[0] : undefined,\n    (args.length === 2 ? args[1] : typeof args[0] === 'function' ? {} : args[0]) || {},\n  ] as [ClerkAstroMiddlewareHandler | undefined, ClerkAstroMiddlewareOptions];\n};\n\ntype AuthenticateRequest = Pick<ClerkClient, 'authenticateRequest'>['authenticateRequest'];\n\n// TODO-SHARED: Duplicate from '@clerk/nextjs'\nexport const createAuthenticateRequestOptions = (\n  clerkRequest: ClerkRequest,\n  options: ClerkAstroMiddlewareOptions,\n  context: AstroMiddlewareContextParam,\n): Parameters<AuthenticateRequest>[1] => {\n  return {\n    ...options,\n    secretKey: options.secretKey || getSafeEnv(context).sk,\n    publishableKey: options.publishableKey || getSafeEnv(context).pk,\n    signInUrl: options.signInUrl || getSafeEnv(context).signInUrl,\n    signUpUrl: options.signUpUrl || getSafeEnv(context).signUpUrl,\n    ...handleMultiDomainAndProxy(clerkRequest, options, context),\n  };\n};\n\n// TODO-SHARED: Duplicate from '@clerk/nextjs'\nexport const decorateResponseWithObservabilityHeaders = (res: Response, requestState: RequestState): Response => {\n  if (requestState.message) {\n    res.headers.set(constants.Headers.AuthMessage, encodeURIComponent(requestState.message));\n  }\n  if (requestState.reason) {\n    res.headers.set(constants.Headers.AuthReason, encodeURIComponent(requestState.reason));\n  }\n  if (requestState.status) {\n    res.headers.set(constants.Headers.AuthStatus, encodeURIComponent(requestState.status));\n  }\n  return res;\n};\n\n// TODO-SHARED: Duplicate from '@clerk/nextjs'\nexport const handleMultiDomainAndProxy = (\n  clerkRequest: ClerkRequest,\n  opts: AuthenticateRequestOptions,\n  context: AstroMiddlewareContextParam,\n) => {\n  const relativeOrAbsoluteProxyUrl = handleValueOrFn(\n    opts?.proxyUrl,\n    clerkRequest.clerkUrl,\n    getSafeEnv(context).proxyUrl,\n  );\n\n  let proxyUrl;\n  if (!!relativeOrAbsoluteProxyUrl && !isHttpOrHttps(relativeOrAbsoluteProxyUrl)) {\n    proxyUrl = new URL(relativeOrAbsoluteProxyUrl, clerkRequest.clerkUrl).toString();\n  } else {\n    proxyUrl = relativeOrAbsoluteProxyUrl;\n  }\n\n  const isSatellite = handleValueOrFn(opts.isSatellite, new URL(clerkRequest.url), getSafeEnv(context).isSatellite);\n  const domain = handleValueOrFn(opts.domain, new URL(clerkRequest.url), getSafeEnv(context).domain);\n  const signInUrl = opts?.signInUrl || getSafeEnv(context).signInUrl;\n\n  if (isSatellite && !proxyUrl && !domain) {\n    throw new Error(missingDomainAndProxy);\n  }\n\n  if (\n    isSatellite &&\n    !isHttpOrHttps(signInUrl) &&\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    isDevelopmentFromSecretKey(opts.secretKey || getSafeEnv(context).sk!)\n  ) {\n    throw new Error(missingSignInUrlInDev);\n  }\n\n  return {\n    proxyUrl,\n    isSatellite,\n    domain,\n  };\n};\n\nexport const missingDomainAndProxy = `\nMissing domain and proxyUrl. A satellite application needs to specify a domain or a proxyUrl.\n\n1) With middleware\n   e.g. export default clerkMiddleware({domain:'YOUR_DOMAIN',isSatellite:true});\n2) With environment variables e.g.\n   PUBLIC_CLERK_DOMAIN='YOUR_DOMAIN'\n   PUBLIC_CLERK_IS_SATELLITE='true'\n   `;\n\nexport const missingSignInUrlInDev = `\nInvalid signInUrl. A satellite application requires a signInUrl for development instances.\nCheck if signInUrl is missing from your configuration or if it is not an absolute URL\n\n1) With middleware\n   e.g. export default clerkMiddleware({signInUrl:'SOME_URL', isSatellite:true});\n2) With environment variables e.g.\n   PUBLIC_CLERK_SIGN_IN_URL='SOME_URL'\n   PUBLIC_CLERK_IS_SATELLITE='true'`;\n\nfunction decorateAstroLocal(clerkRequest: ClerkRequest, context: APIContext, requestState: RequestState) {\n  const { reason, message, status, token } = requestState;\n  context.locals.authToken = token;\n  context.locals.authStatus = status;\n  context.locals.authMessage = message;\n  context.locals.authReason = reason;\n  context.locals.auth = ({ treatPendingAsSignedOut }: PendingSessionOptions = {}) => {\n    const authObject = getAuth(clerkRequest, context.locals, { treatPendingAsSignedOut });\n\n    const clerkUrl = clerkRequest.clerkUrl;\n\n    const redirectToSignIn: RedirectFun<Response> = (opts = {}) => {\n      const devBrowserToken =\n        clerkRequest.clerkUrl.searchParams.get(constants.QueryParameters.DevBrowser) ||\n        clerkRequest.cookies.get(constants.Cookies.DevBrowser);\n\n      return createRedirect({\n        redirectAdapter,\n        devBrowserToken: devBrowserToken,\n        baseUrl: clerkUrl.toString(),\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        publishableKey: getSafeEnv(context).pk!,\n        signInUrl: requestState.signInUrl,\n        signUpUrl: requestState.signUpUrl,\n        sessionStatus: requestState.toAuth()?.sessionStatus,\n      }).redirectToSignIn({\n        returnBackUrl: opts.returnBackUrl === null ? '' : opts.returnBackUrl || clerkUrl.toString(),\n      });\n    };\n\n    return Object.assign(authObject, { redirectToSignIn });\n  };\n\n  context.locals.currentUser = createCurrentUser(clerkRequest, context);\n}\n\n/**\n * Find the index of the closing head tag in the chunk.\n *\n * Note: This implementation uses a simple approach that works for most of our\n * current use cases.\n */\nfunction findClosingHeadTagIndex(chunk: Uint8Array, endHeadTag: Uint8Array) {\n  return chunk.findIndex((_, i) => endHeadTag.every((value, j) => value === chunk[i + j]));\n}\n\nfunction decorateRequest(locals: APIContext['locals'], res: Response): Response {\n  /**\n   * Populate every page with the authObject. This allows for SSR to work properly\n   * without sucrificing DX and having developers wrap each page with a Layout that would handle this.\n   */\n  if (res.headers.get('content-type') === 'text/html') {\n    const encoder = new TextEncoder();\n    const closingHeadTag = encoder.encode('</head>');\n    const clerkAstroData = encoder.encode(\n      `<script id=\"__CLERK_ASTRO_DATA__\" type=\"application/json\">${JSON.stringify(locals.auth())}</script>\\n`,\n    );\n    const clerkSafeEnvVariables = encoder.encode(\n      `<script id=\"__CLERK_ASTRO_SAFE_VARS__\" type=\"application/json\">${JSON.stringify(getClientSafeEnv(locals))}</script>\\n`,\n    );\n    const hotloadScript = encoder.encode(buildClerkHotloadScript(locals));\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const stream = res.body!.pipeThrough(\n      new TransformStream({\n        transform(chunk, controller) {\n          const index = findClosingHeadTagIndex(chunk, closingHeadTag);\n          const isClosingHeadTagFound = index !== -1;\n\n          /**\n           * Hijack html response to position `__CLERK_ASTRO_DATA__` before the closing `head` html tag\n           */\n          if (isClosingHeadTagFound) {\n            controller.enqueue(chunk.slice(0, index));\n            controller.enqueue(clerkAstroData);\n            controller.enqueue(clerkSafeEnvVariables);\n\n            controller.enqueue(hotloadScript);\n\n            controller.enqueue(closingHeadTag);\n            controller.enqueue(chunk.slice(index + closingHeadTag.length));\n          } else {\n            controller.enqueue(chunk);\n          }\n        },\n      }),\n    );\n\n    const modifiedResponse = new Response(stream, {\n      status: res.status,\n      statusText: res.statusText,\n      headers: res.headers,\n    });\n\n    return modifiedResponse;\n  }\n  return res;\n}\n\nconst redirectAdapter = (url: string | URL) => {\n  const res = new Response(null, {\n    status: 307,\n  });\n\n  /**\n   * Hint to clerk to add cookie with db jwt\n   */\n  setHeader(res, constants.Headers.ClerkRedirectTo, 'true');\n  return setHeader(res, 'Location', url instanceof URL ? url.href : url);\n};\n\nconst createMiddlewareRedirectToSignIn = (\n  clerkRequest: ClerkRequest,\n): ClerkMiddlewareAuthObject['redirectToSignIn'] => {\n  return (opts = {}) => {\n    const err = new Error(CONTROL_FLOW_ERROR.REDIRECT_TO_SIGN_IN) as any;\n    err.returnBackUrl = opts.returnBackUrl === null ? '' : opts.returnBackUrl || clerkRequest.clerkUrl.toString();\n    throw err;\n  };\n};\n\n// Handle errors thrown by redirectToSignIn() calls,\n// as we want to align the APIs between middleware, pages and route handlers\n// Normally, middleware requires to explicitly return a response, but we want to\n// avoid discrepancies between the APIs as it's easy to miss the `return` statement\n// especially when copy-pasting code from one place to another.\n// This function handles the known errors thrown by the APIs described above,\n// and returns the appropriate response.\nconst handleControlFlowErrors = (\n  e: any,\n  clerkRequest: ClerkRequest,\n  requestState: RequestState,\n  context: AstroMiddlewareContextParam,\n): Response => {\n  switch (e.message) {\n    case CONTROL_FLOW_ERROR.REDIRECT_TO_SIGN_IN:\n      return createRedirect({\n        redirectAdapter,\n        baseUrl: clerkRequest.clerkUrl,\n        signInUrl: requestState.signInUrl,\n        signUpUrl: requestState.signUpUrl,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        publishableKey: getSafeEnv(context).pk!,\n        sessionStatus: requestState.toAuth()?.sessionStatus,\n      }).redirectToSignIn({ returnBackUrl: e.returnBackUrl });\n    default:\n      throw e;\n  }\n};\n","import { clerkJsScriptUrl } from '@clerk/shared/loadClerkJsScript';\nimport type { APIContext } from 'astro';\n\nimport { getSafeEnv } from './get-safe-env';\n\nfunction buildClerkHotloadScript(locals: APIContext['locals']) {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const publishableKey = getSafeEnv(locals).pk!;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const proxyUrl = getSafeEnv(locals).proxyUrl!;\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const domain = getSafeEnv(locals).domain!;\n  const scriptSrc = clerkJsScriptUrl({\n    clerkJSUrl: getSafeEnv(locals).clerkJsUrl,\n    clerkJSVariant: getSafeEnv(locals).clerkJsVariant,\n    clerkJSVersion: getSafeEnv(locals).clerkJsVersion,\n    domain,\n    proxyUrl,\n    publishableKey,\n  });\n  return `\n  <script src=\"${scriptSrc}\"\n  data-clerk-js-script\n  async\n  crossOrigin='anonymous'\n  ${publishableKey ? `data-clerk-publishable-key=\"${publishableKey}\"` : ``}\n  ${proxyUrl ? `data-clerk-proxy-url=\"${proxyUrl}\"` : ``}\n  ${domain ? `data-clerk-domain=\"${domain}\"` : ``}\n  ></script>\\n`;\n}\n\nexport { buildClerkHotloadScript };\n","import { isTruthy } from '@clerk/shared/underscore';\nimport type { APIContext } from 'astro';\n\ntype ContextOrLocals = APIContext | APIContext['locals'];\n\n/**\n * @internal\n * Isomorphic handler for reading environment variables defined from Vite or are injected in the request context (CF Pages)\n */\nfunction getContextEnvVar(envVarName: keyof InternalEnv, contextOrLocals: ContextOrLocals): string | undefined {\n  const locals = 'locals' in contextOrLocals ? contextOrLocals.locals : contextOrLocals;\n\n  if (locals?.runtime?.env) {\n    return locals.runtime.env[envVarName];\n  }\n\n  return import.meta.env[envVarName];\n}\n\n/**\n * @internal\n */\nfunction getSafeEnv(context: ContextOrLocals) {\n  return {\n    domain: getContextEnvVar('PUBLIC_CLERK_DOMAIN', context),\n    isSatellite: getContextEnvVar('PUBLIC_CLERK_IS_SATELLITE', context) === 'true',\n    proxyUrl: getContextEnvVar('PUBLIC_CLERK_PROXY_URL', context),\n    pk: getContextEnvVar('PUBLIC_CLERK_PUBLISHABLE_KEY', context),\n    sk: getContextEnvVar('CLERK_SECRET_KEY', context),\n    signInUrl: getContextEnvVar('PUBLIC_CLERK_SIGN_IN_URL', context),\n    signUpUrl: getContextEnvVar('PUBLIC_CLERK_SIGN_UP_URL', context),\n    clerkJsUrl: getContextEnvVar('PUBLIC_CLERK_JS_URL', context),\n    clerkJsVariant: getContextEnvVar('PUBLIC_CLERK_JS_VARIANT', context) as 'headless' | '' | undefined,\n    clerkJsVersion: getContextEnvVar('PUBLIC_CLERK_JS_VERSION', context),\n    apiVersion: getContextEnvVar('CLERK_API_VERSION', context),\n    apiUrl: getContextEnvVar('CLERK_API_URL', context),\n    telemetryDisabled: isTruthy(getContextEnvVar('PUBLIC_CLERK_TELEMETRY_DISABLED', context)),\n    telemetryDebug: isTruthy(getContextEnvVar('PUBLIC_CLERK_TELEMETRY_DEBUG', context)),\n  };\n}\n\n/**\n * @internal\n * This should be used in order to pass environment variables from the server safely to the client.\n * When running an application with `wrangler pages dev` client side environment variables are not attached to `import.meta.env.*`\n * This is not the case when deploying to cloudflare pages directly\n * This is a way to get around it.\n */\nfunction getClientSafeEnv(context: ContextOrLocals) {\n  return {\n    domain: getContextEnvVar('PUBLIC_CLERK_DOMAIN', context),\n    isSatellite: getContextEnvVar('PUBLIC_CLERK_IS_SATELLITE', context) === 'true',\n    proxyUrl: getContextEnvVar('PUBLIC_CLERK_PROXY_URL', context),\n    signInUrl: getContextEnvVar('PUBLIC_CLERK_SIGN_IN_URL', context),\n    signUpUrl: getContextEnvVar('PUBLIC_CLERK_SIGN_UP_URL', context),\n  };\n}\n\nexport { getSafeEnv, getClientSafeEnv };\n","import type { ClerkClient, ClerkOptions } from '@clerk/backend';\nimport { createClerkClient } from '@clerk/backend';\nimport type { APIContext } from 'astro';\n\nimport { getSafeEnv } from './get-safe-env';\n\ntype CreateClerkClientWithOptions = (context: APIContext, options?: ClerkOptions) => ClerkClient;\nconst createClerkClientWithOptions: CreateClerkClientWithOptions = (context, options) =>\n  createClerkClient({\n    secretKey: getSafeEnv(context).sk,\n    publishableKey: getSafeEnv(context).pk,\n    apiUrl: getSafeEnv(context).apiUrl,\n    apiVersion: getSafeEnv(context).apiVersion,\n    proxyUrl: getSafeEnv(context).proxyUrl,\n    domain: getSafeEnv(context).domain,\n    isSatellite: getSafeEnv(context).isSatellite,\n    userAgent: `${PACKAGE_NAME}@${PACKAGE_VERSION}`,\n    sdkMetadata: {\n      name: PACKAGE_NAME,\n      version: PACKAGE_VERSION,\n      // eslint-disable-next-line turbo/no-undeclared-env-vars\n      environment: import.meta.env.MODE,\n    },\n    telemetry: {\n      disabled: getSafeEnv(context).telemetryDisabled,\n      debug: getSafeEnv(context).telemetryDebug,\n    },\n    ...options,\n  });\n\nconst clerkClient = (context: APIContext) => createClerkClientWithOptions(context);\n\nexport { clerkClient };\n","import type { SignedInAuthObject, SignedOutAuthObject } from '@clerk/backend/internal';\nimport { AuthStatus, getAuthObjectFromJwt, signedOutAuthObject } from '@clerk/backend/internal';\nimport { decodeJwt } from '@clerk/backend/jwt';\nimport type { PendingSessionOptions } from '@clerk/types';\nimport type { APIContext } from 'astro';\n\nimport { getSafeEnv } from './get-safe-env';\nimport { getAuthKeyFromRequest } from './utils';\n\nexport type GetAuthReturn = SignedInAuthObject | SignedOutAuthObject;\n\nexport const createGetAuth = ({ noAuthStatusMessage }: { noAuthStatusMessage: string }) => {\n  return (\n    req: Request,\n    locals: APIContext['locals'],\n    { treatPendingAsSignedOut = true, ...opts }: { secretKey?: string } & PendingSessionOptions = {},\n  ): GetAuthReturn => {\n    // When the auth status is set, we trust that the middleware has already run\n    // Then, we don't have to re-verify the JWT here,\n    // we can just strip out the claims manually.\n    const authToken = locals.authToken || getAuthKeyFromRequest(req, 'AuthToken');\n    const authStatus = locals.authStatus || (getAuthKeyFromRequest(req, 'AuthStatus') as AuthStatus);\n    const authMessage = locals.authMessage || getAuthKeyFromRequest(req, 'AuthMessage');\n    const authReason = locals.authReason || getAuthKeyFromRequest(req, 'AuthReason');\n\n    if (!authStatus) {\n      throw new Error(noAuthStatusMessage);\n    }\n\n    const options = {\n      authStatus,\n      apiUrl: getSafeEnv(locals).apiUrl,\n      apiVersion: getSafeEnv(locals).apiVersion,\n      authMessage,\n      secretKey: opts?.secretKey || getSafeEnv(locals).sk,\n      authReason,\n    };\n\n    if (authStatus !== AuthStatus.SignedIn) {\n      return signedOutAuthObject(options);\n    }\n\n    return getAuthObjectFromJwt(decodeJwt(authToken as string), { ...options, treatPendingAsSignedOut });\n  };\n};\n\n// TODO: Once docs for astro land, update the following message with this line\n// \"For more details, see <link-to-docs>\"\nconst authAuthHeaderMissing = (helperName = 'auth') =>\n  `Clerk: ${helperName}() was called but Clerk can't detect usage of clerkMiddleware(). Please ensure that the clerkMiddleware() is used in your Astro Middleware.\n    `;\n\nexport const getAuth = createGetAuth({\n  noAuthStatusMessage: authAuthHeaderMissing(),\n});\n","import { constants } from '@clerk/backend/internal';\n\nexport function getAuthKeyFromRequest(req: Request, key: keyof typeof constants.Attributes): string | null | undefined {\n  return getHeader(req, constants.Headers[key]);\n}\n\nfunction getHeader(req: Request, name: string) {\n  return req.headers.get(name);\n}\n\nexport const isRedirect = (res: Response) => {\n  return (\n    [300, 301, 302, 303, 304, 307, 308].includes(res.status) ||\n    res.headers.get(constants.Headers.ClerkRedirectTo) === 'true'\n  );\n};\n\nexport const setHeader = <T extends Response>(res: T, name: string, val: string): T => {\n  res.headers.set(name, val);\n  return res;\n};\n","import type { User } from '@clerk/backend';\nimport type { APIContext } from 'astro';\n\nimport { clerkClient } from './clerk-client';\nimport { getAuth } from './get-auth';\n\nexport const createCurrentUser = (req: Request, context: APIContext) => {\n  return async (): Promise<User | null> => {\n    const { userId } = getAuth(req, context.locals);\n    if (!userId) {\n      return null;\n    }\n\n    return clerkClient(context).users.getUser(userId);\n  };\n};\n","// Middleware runs on the server side, before clerk-js is loaded, that's why we need Cookies.\nimport type { AuthenticateRequestOptions, ClerkRequest } from '@clerk/backend/internal';\nimport { constants } from '@clerk/backend/internal';\nimport { DEV_BROWSER_JWT_KEY, setDevBrowserJWTInURL } from '@clerk/shared/devBrowser';\nimport { isDevelopmentFromSecretKey } from '@clerk/shared/keys';\n\nimport { getSafeEnv } from './get-safe-env';\nimport type { AstroMiddlewareContextParam } from './types';\n\n// TODO-SHARED: This exists in @clerk/nextjs\n/**\n * Grabs the dev browser JWT from cookies and appends it to the redirect URL when redirecting to cross-origin.\n */\nexport const serverRedirectWithAuth = (\n  context: AstroMiddlewareContextParam,\n  clerkRequest: ClerkRequest,\n  res: Response,\n  opts: AuthenticateRequestOptions,\n) => {\n  const location = res.headers.get('location');\n  const shouldAppendDevBrowser = res.headers.get(constants.Headers.ClerkRedirectTo) === 'true';\n\n  if (\n    shouldAppendDevBrowser &&\n    !!location &&\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    isDevelopmentFromSecretKey(opts.secretKey || getSafeEnv(context).sk!) &&\n    clerkRequest.clerkUrl.isCrossOrigin(location)\n  ) {\n    const dbJwt = clerkRequest.cookies.get(DEV_BROWSER_JWT_KEY) || '';\n    const url = new URL(location);\n    const urlWithDevBrowser = setDevBrowserJWTInURL(url, dbJwt);\n    return context.redirect(urlWithDevBrowser.href, 307);\n  }\n  return res;\n};\n","import { createPathMatcher, type PathMatcherParam } from '@clerk/shared/pathMatcher';\n\nexport type RouteMatcherParam = PathMatcherParam;\n\n/**\n * Returns a function that accepts a `Request` object and returns whether the request matches the list of\n * predefined routes that can be passed in as the first argument.\n *\n * You can use glob patterns to match multiple routes or a function to match against the request object.\n * Path patterns and regular expressions are supported, for example: `['/foo', '/bar(.*)'] or `[/^\\/foo\\/.*$/]`\n * For more information, see: https://clerk.com/docs\n */\nexport const createRouteMatcher = (routes: RouteMatcherParam) => {\n  const matcher = createPathMatcher(routes);\n  return (req: Request) => matcher(new URL(req.url).pathname);\n};\n"],"mappings":"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","names":["createClerkClient","AuthStatus","constants","isDevelopmentFromSecretKey","constants","constants","constants","AuthStatus","isDevelopmentFromSecretKey"]}