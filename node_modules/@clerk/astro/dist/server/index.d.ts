import { ClerkClient } from '@clerk/backend';
export { AllowlistIdentifier, Client, EmailAddress, ExternalAccount, Invitation, OauthAccessToken, Organization, OrganizationDomain, OrganizationInvitation, OrganizationMembership, OrganizationMembershipPublicUserData, OrganizationMembershipRole, PhoneNumber, SMSMessage, Session, SignInToken, Token, User, WebhookEvent, WebhookEventType, createClerkClient, verifyToken } from '@clerk/backend';
import { SignedInAuthObject, SignedOutAuthObject, AuthenticateRequestOptions } from '@clerk/backend/internal';
import { APIContext } from 'astro';
import { PathMatcherParam } from '@clerk/shared/pathMatcher';

/**
 * These types are copied from astro.
 * In Astro v3 and v4 both resolve in the save types, but
 * in v3 `MiddlewareNext` is a generic and in v4 it is not.
 */
type MiddlewareNext = () => Promise<Response>;
type MiddlewareHandler = (context: APIContext, next: MiddlewareNext) => Promise<Response> | Response | Promise<void> | void;
type AstroMiddleware = MiddlewareHandler;
type AstroMiddlewareContextParam = APIContext;
type AstroMiddlewareNextParam = MiddlewareNext;
type AstroMiddlewareReturn = Response | Promise<Response>;

type ClerkMiddlewareAuthObject = (SignedInAuthObject | SignedOutAuthObject) & {
    redirectToSignIn: (opts?: {
        returnBackUrl?: URL | string | null;
    }) => Response;
};
type ClerkAstroMiddlewareHandler = (auth: () => ClerkMiddlewareAuthObject, context: AstroMiddlewareContextParam, next: AstroMiddlewareNextParam) => AstroMiddlewareReturn | undefined;
type ClerkAstroMiddlewareOptions = AuthenticateRequestOptions;
/**
 * Middleware for Astro that handles authentication and authorization with Clerk.
 */
interface ClerkMiddleware {
    /**
     * @example
     * export default clerkMiddleware((auth, context, next) => { ... }, options);
     */
    (handler: ClerkAstroMiddlewareHandler, options?: ClerkAstroMiddlewareOptions): AstroMiddleware;
    /**
     * @example
     * export default clerkMiddleware(options);
     */
    (options?: ClerkAstroMiddlewareOptions): AstroMiddleware;
}
declare const clerkMiddleware: ClerkMiddleware;

type RouteMatcherParam = PathMatcherParam;
/**
 * Returns a function that accepts a `Request` object and returns whether the request matches the list of
 * predefined routes that can be passed in as the first argument.
 *
 * You can use glob patterns to match multiple routes or a function to match against the request object.
 * Path patterns and regular expressions are supported, for example: `['/foo', '/bar(.*)'] or `[/^\/foo\/.*$/]`
 * For more information, see: https://clerk.com/docs
 */
declare const createRouteMatcher: (routes: RouteMatcherParam) => (req: Request) => boolean;

declare const clerkClient: (context: APIContext) => ClerkClient;

type GetAuthReturn = SignedInAuthObject | SignedOutAuthObject;

export { type GetAuthReturn, clerkClient, clerkMiddleware, createRouteMatcher };
