import { a as AstroClerkUpdateOptions } from '../types-BVhZmUS2.js';
import * as _clerk_types from '@clerk/types';
import * as nanostores from 'nanostores';

declare function updateClerkOptions(options: AstroClerkUpdateOptions): void;

/**
 * A client side store that returns the loaded state of clerk-js.
 *
 * @example
 * $isLoadedStore.subscribe((authloaded => console.log(loaded))
 */
declare const $isLoadedStore: nanostores.ReadableAtom<boolean>;
/**
 * A client side store that is prepopulated with the authentication context during SSR.
 * It is a nanostore, for instructions on how to use nanostores please review the [documentation](https://github.com/nanostores/nanostores)
 *
 * @example
 * $authStore.subscribe((auth) => console.log(auth.userId))
 */
declare const $authStore: nanostores.ReadableAtom<{
    userId: string | null | undefined;
    user: _clerk_types.UserResource | null | undefined;
    sessionId: string | null | undefined;
    session: _clerk_types.SignedInSessionResource | null | undefined;
    sessionStatus: "active" | "pending" | undefined;
    sessionClaims: _clerk_types.JwtPayload | null | undefined;
    organization: _clerk_types.OrganizationResource | null | undefined;
    orgId: string | null | undefined;
    orgRole: string | null | undefined;
    orgSlug: string | null | undefined;
    orgPermissions: _clerk_types.Autocomplete<_clerk_types.OrganizationSystemPermissionKey, string>[] | null | undefined;
    actor: _clerk_types.ActClaim | null | undefined;
    factorVerificationAge: [number, number] | null;
}>;
/**
 * A client side store that is populated after clerk-js has loaded.
 * The store returns back the authenticated user or `null`.
 * It is a nanostore, for instructions on how to use nanostores please review the [documentation](https://github.com/nanostores/nanostores)
 *
 * @example
 * $userStore.subscribe((user) => console.log(user.id))
 */
declare const $userStore: nanostores.ReadableAtom<_clerk_types.UserResource | null | undefined>;
/**
 * A client side store that is populated after clerk-js has loaded.
 * The store returns the session of the authenticated user or `null`.
 * It is a nanostore, for instructions on how to use nanostores please review the [documentation](https://github.com/nanostores/nanostores)
 *
 * @example
 * $sessionStore.subscribe((session) => console.log(session.id))
 */
declare const $sessionStore: nanostores.ReadableAtom<_clerk_types.ActiveSessionResource | _clerk_types.PendingSessionResource | null | undefined>;
/**
 * A client side store that is populated after clerk-js has loaded.
 * The store returns the active organization of the authenticated user or `null`.
 * It is a nanostore, for instructions on how to use nanostores please review the [documentation](https://github.com/nanostores/nanostores)
 *
 * @example
 * $organizationStore.subscribe((org) => console.log(org.id))
 */
declare const $organizationStore: nanostores.ReadableAtom<_clerk_types.OrganizationResource | null | undefined>;
/**
 * A client side store that is populated after clerk-js has loaded.
 * The store returns the clerk client or `null`.
 * It is a nanostore, for instructions on how to use nanostores please review the [documentation](https://github.com/nanostores/nanostores)
 *
 * @example
 * $clientStore.subscribe((client) => console.log(client.activeSessions))
 */
declare const $clientStore: nanostores.ReadableAtom<_clerk_types.ClientResource | null | undefined>;
/**
 * A client side store that is populated after clerk-js is instanciated.
 * The store returns the clerk instance or `null`.
 * It is a nanostore, for instructions on how to use nanostores please review the [documentation](https://github.com/nanostores/nanostores)
 *
 * @example
 * $clerkStore.subscribe((clerk) => console.log(clerk.publishableKey))
 */
declare const $clerkStore: nanostores.ReadableAtom<_clerk_types.Clerk | null>;
/**
 * A client side store that is populated after clerk-js has loaded.
 * The store returns all the sessions of the current clerk client or `null`.
 * It is a nanostore, for instructions on how to use nanostores please review the [documentation](https://github.com/nanostores/nanostores)
 *
 * @example
 * $sessionListStore.subscribe((sessionList) => sessionList.map((session) => console.log('Session id:', sessino.id) ))
 */
declare const $sessionListStore: nanostores.ReadableAtom<_clerk_types.SessionResource[] | undefined>;
/**
 * A client side store that is populated after clerk-js has loaded.
 * The store returns a `SignInResource` or `null`.
 * It is a nanostore, for instructions on how to use nanostores please review the [documentation](https://github.com/nanostores/nanostores)
 *
 * @example
 * $signInStore.subscribe((signIn) => console.log(signIn.status))
 */
declare const $signInStore: nanostores.ReadableAtom<_clerk_types.SignInResource | undefined>;
/**
 * A client side store that is populated after clerk-js has loaded.
 * The store returns a `SignUpResource` or `null`.
 * It is a nanostore, for instructions on how to use nanostores please review the [documentation](https://github.com/nanostores/nanostores)
 *
 * @example
 * $signUpStore.subscribe((signUp) => console.log(signUp.status))
 */
declare const $signUpStore: nanostores.ReadableAtom<_clerk_types.SignUpResource | undefined>;

export { $authStore, $clerkStore, $clientStore, $isLoadedStore, $organizationStore, $sessionListStore, $sessionStore, $signInStore, $signUpStore, $userStore, updateClerkOptions };
