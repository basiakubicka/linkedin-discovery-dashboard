import {
  $clerk,
  $clerkStore,
  $csrState
} from "./chunk-K6S4O6NY.js";

// src/internal/create-clerk-instance.ts
import { loadClerkJsScript, setClerkJsLoadingErrorPackageName } from "@clerk/shared/loadClerkJsScript";

// src/internal/invoke-clerk-astro-js-functions.ts
var invokeClerkAstroJSFunctions = () => {
  const functionNames = ["handleRedirectCallback"];
  functionNames.forEach((fnName) => {
    const elementsOfCategory = document.querySelectorAll(`[data-clerk-function-id^="clerk-${fnName}"]`);
    elementsOfCategory.forEach((el) => {
      const id = el.getAttribute("data-clerk-function-id");
      const props = window.__astro_clerk_function_props?.get(fnName)?.get(id) ?? {};
      void $clerk.get()?.[fnName]?.(props);
    });
  });
};

// src/internal/mount-clerk-astro-js-components.ts
var mountAllClerkAstroJSComponents = () => {
  const mountFns = {
    "create-organization": "mountCreateOrganization",
    "organization-list": "mountOrganizationList",
    "organization-profile": "mountOrganizationProfile",
    "organization-switcher": "mountOrganizationSwitcher",
    "user-button": "mountUserButton",
    "user-profile": "mountUserProfile",
    "sign-in": "mountSignIn",
    "sign-up": "mountSignUp",
    "google-one-tap": "openGoogleOneTap",
    waitlist: "mountWaitlist",
    "pricing-table": "mountPricingTable"
  };
  Object.entries(mountFns).forEach(([category, mountFn]) => {
    const elementsOfCategory = document.querySelectorAll(`[data-clerk-id^="clerk-${category}"]`);
    elementsOfCategory.forEach((el) => {
      const clerkId = el.getAttribute("data-clerk-id");
      const props = window.__astro_clerk_component_props?.get(category)?.get(clerkId);
      if (el) {
        $clerk.get()?.[mountFn](el, props);
      }
    });
  });
};

// src/internal/run-once.ts
var runOnce = (onFirst) => {
  let hasRun = false;
  return (params) => {
    if (hasRun) {
      const clerkJSInstance = window.Clerk;
      return new Promise((res) => {
        if (!clerkJSInstance) {
          return res(false);
        }
        if (clerkJSInstance.loaded) {
          mountAllClerkAstroJSComponents();
          invokeClerkAstroJSFunctions();
        }
        return res(clerkJSInstance.loaded);
      });
    }
    hasRun = true;
    return onFirst(params);
  };
};

// src/internal/create-clerk-instance.ts
var initOptions;
setClerkJsLoadingErrorPackageName("@clerk/astro");
function createNavigationHandler(windowNav) {
  return (to, opts) => {
    if (opts?.__internal_metadata?.navigationType === "internal") {
      windowNav(history.state, "", to);
    } else {
      opts?.windowNavigate(to);
    }
  };
}
var createClerkInstance = runOnce(createClerkInstanceInternal);
async function createClerkInstanceInternal(options) {
  let clerkJSInstance = window.Clerk;
  if (!clerkJSInstance) {
    await loadClerkJsScript(options);
    if (!window.Clerk) {
      throw new Error("Failed to download latest ClerkJS. Contact support@clerk.com.");
    }
    clerkJSInstance = window.Clerk;
  }
  if (!$clerk.get()) {
    $clerk.set(clerkJSInstance);
  }
  initOptions = {
    routerPush: createNavigationHandler(window.history.pushState.bind(window.history)),
    routerReplace: createNavigationHandler(window.history.replaceState.bind(window.history)),
    ...options
  };
  return clerkJSInstance.load(initOptions).then(() => {
    $csrState.setKey("isLoaded", true);
    $clerkStore.notify();
    mountAllClerkAstroJSComponents();
    invokeClerkAstroJSFunctions();
    clerkJSInstance.addListener((payload) => {
      $csrState.setKey("client", payload.client);
      $csrState.setKey("user", payload.user);
      $csrState.setKey("session", payload.session);
      $csrState.setKey("organization", payload.organization);
    });
  }).catch(() => {
  });
}
function updateClerkOptions(options) {
  const clerk = $clerk.get();
  if (!clerk) {
    throw new Error("Missing clerk instance");
  }
  void clerk.__unstable__updateProps({
    options: { ...initOptions, ...options },
    appearance: { ...initOptions?.appearance, ...options.appearance }
  });
}

export {
  createClerkInstance,
  updateClerkOptions
};
//# sourceMappingURL=chunk-TCNSLRU4.js.map