---
import Layout from '../layouts/Layout.astro';

// API base URL - you can make this an environment variable later
const API_BASE = 'https://linkedin-ai-proxy.vercel.app/api';
---

<Layout title="LinkedIn Discovery Dashboard">
  <!-- Page Header -->
  <div class="mb-8">
    <h1 class="text-4xl font-bold text-gray-900 mb-3">üîç Discover High-Performing Posts</h1>
    <p class="text-xl text-gray-600">Search LinkedIn for viral posts in your niche and identify qualified leads from comments.</p>
  </div>

  <!-- Create New Search Section -->
  <div class="bg-white rounded-xl shadow-md border border-gray-100 p-6 mb-8">
    <h2 class="text-lg font-bold text-gray-900 mb-4">Create New Search</h2>
    
    <form id="search-form" class="space-y-4">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-4">
        <!-- Search Name -->
        <div>
          <label for="search-name" class="block text-sm font-medium text-gray-700 mb-2">
            Search Name
          </label>
          <input 
            type="text" 
            id="search-name" 
            placeholder="e.g., B2B SaaS Growth"
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200"
            required
          />
        </div>
        
        <!-- Keywords -->
        <div>
          <label for="keywords" class="block text-sm font-medium text-gray-700 mb-2">
            Keywords
          </label>
          <input 
            type="text" 
            id="keywords" 
            placeholder="e.g., startup growth, customer acquisition"
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200"
            required
          />
        </div>
        
        <!-- Description -->
        <div>
          <label for="description" class="block text-sm font-medium text-gray-700 mb-2">
            Description (Optional)
          </label>
          <input 
            type="text" 
            id="description" 
            placeholder="Describe the types of posts..."
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200"
          />
        </div>
      </div>
      
      <!-- Action Buttons -->
      <div class="flex justify-end gap-3 pt-2">
        <button type="button" id="save-search" class="save-btn-small">
          üíæ Save Search
        </button>
        <button type="submit" class="run-btn-small">
          üöÄ Run Search
        </button>
      </div>
    </form>
  </div>

  <!-- Tabs Navigation -->
  <div class="bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden">
    <!-- Tab Headers -->
    <div class="border-b border-gray-200">
      <nav class="flex">
        <button 
          id="search-results-tab" 
          class="tab-button active w-1/2 py-4 px-6 text-lg font-semibold focus:outline-none transition-all duration-200"
        >
          üìä Search Results
        </button>
        <button 
          id="saved-searches-tab" 
          class="tab-button w-1/2 py-4 px-6 text-lg font-semibold focus:outline-none transition-all duration-200"
        >
          üìö Saved Searches
        </button>
      </nav>
    </div>

    <!-- Tab Content -->
    <div class="p-8">
      
      <!-- Search Results Tab -->
      <div id="search-results-content" class="tab-content">
        <div id="results-container">
          <div class="text-center py-16">
            <div class="text-6xl mb-4">üîç</div>
            <h3 class="text-xl font-semibold text-gray-600 mb-2">No search results yet</h3>
            <p class="text-gray-500">Run a search to see high-performing LinkedIn posts here</p>
          </div>
        </div>
      </div>

      <!-- Saved Searches Tab -->
      <div id="saved-searches-content" class="tab-content hidden">
        <div class="flex justify-between items-center mb-6">
          <h3 class="text-xl font-bold text-gray-900">Your Saved Searches</h3>
          <button id="refresh-searches" class="refresh-btn">
            üîÑ Refresh
          </button>
        </div>
        
        <div id="saved-searches-container">
          <!-- Loading state -->
          <div class="space-y-4">
            <div class="animate-pulse">
              <div class="h-6 bg-gray-200 rounded-lg w-3/4 mb-3"></div>
              <div class="h-4 bg-gray-200 rounded-lg w-1/2 mb-2"></div>
              <div class="h-4 bg-gray-200 rounded-lg w-5/6"></div>
            </div>
          </div>
        </div>
      </div>
      
    </div>
  </div>

  <!-- Status Messages -->
  <div id="status-message" class="hidden fixed bottom-6 right-6 max-w-sm z-50"></div>
</Layout>

<script define:vars={{ API_BASE }}>
  // Tab switching functionality
  function switchTab(tabName) {
    // Hide all tab content
    document.querySelectorAll('.tab-content').forEach(content => {
      content.classList.add('hidden');
    });
    
    // Remove active class from all tabs
    document.querySelectorAll('.tab-button').forEach(button => {
      button.classList.remove('active');
    });
    
    // Show selected tab content
    document.getElementById(tabName + '-content').classList.remove('hidden');
    
    // Add active class to selected tab
    document.getElementById(tabName + '-tab').classList.add('active');
  }

  // API helper function
  async function apiCall(endpoint, options = {}) {
    try {
      const response = await fetch(`${API_BASE}${endpoint}`, {
        headers: {
          'Content-Type': 'application/json',
          'user-id': 'default-user',
          ...options.headers
        },
        ...options
      });
      
      if (!response.ok) {
        throw new Error(`API Error: ${response.status}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('API call failed:', error);
      throw error;
    }
  }

  // Show status message
  function showStatus(message, type = 'info') {
    const statusEl = document.getElementById('status-message');
    const bgColor = type === 'error' ? 'bg-red-500' : type === 'success' ? 'bg-green-500' : 'bg-blue-500';
    
    statusEl.innerHTML = `
      <div class="${bgColor} text-white px-6 py-4 rounded-2xl shadow-xl">
        <div class="flex items-center">
          <span class="text-lg">${message}</span>
        </div>
      </div>
    `;
    statusEl.classList.remove('hidden');
    
    setTimeout(() => {
      statusEl.classList.add('hidden');
    }, 5000);
  }

  // Load saved searches
  async function loadSavedSearches() {
    try {
      // Use dummy data for demonstration
      const dummySearches = [
        {
          id: 1,
          name: "B2B SaaS Growth",
          query_text: "startup growth, customer acquisition, SaaS metrics",
          fuzzy_description: "Posts about scaling B2B SaaS companies",
          pending_posts_count: 12,
          last_execution: "2024-01-10T10:30:00Z"
        },
        {
          id: 2,
          name: "AI Marketing Tools",
          query_text: "artificial intelligence, marketing automation, AI tools",
          fuzzy_description: "Latest AI-powered marketing solutions and strategies",
          pending_posts_count: 8,
          last_execution: "2024-01-09T14:15:00Z"
        },
        {
          id: 3,
          name: "Startup Funding",
          query_text: "venture capital, seed funding, startup investment",
          fuzzy_description: null,
          pending_posts_count: 15,
          last_execution: null
        }
      ];
      
      const container = document.getElementById('saved-searches-container');
      
      container.innerHTML = dummySearches.map(search => `
        <div class="search-card">
          <div class="flex justify-between items-start mb-4">
            <div class="flex-1">
              <h4 class="text-xl font-bold text-gray-900 mb-2">${search.name}</h4>
              <p class="text-gray-600 mb-1">
                <span class="font-semibold">Keywords:</span> ${search.query_text}
              </p>
              ${search.fuzzy_description ? `
                <p class="text-gray-600 mb-3">
                  <span class="font-semibold">Description:</span> ${search.fuzzy_description}
                </p>
              ` : ''}
            </div>
            <div class="flex items-center gap-4">
              <div class="text-right">
                <div class="text-2xl font-bold text-purple-600">${search.pending_posts_count || 0}</div>
                <div class="text-sm text-gray-500">pending posts</div>
              </div>
            </div>
          </div>
          
          <div class="flex justify-between items-center">
            <div class="text-sm text-gray-500">
              Last run: ${search.last_execution ? new Date(search.last_execution).toLocaleDateString() : 'Never'}
            </div>
            <button onclick="runSearch(${search.id})" class="run-search-btn">
              üöÄ Run Search
            </button>
          </div>
        </div>
      `).join('');
      
    } catch (error) {
      console.error('Failed to load searches:', error);
      showStatus('Failed to load saved searches', 'error');
    }
  }

  // Save search
  async function saveSearch() {
    try {
      const searchData = {
        name: document.getElementById('search-name').value,
        query_text: document.getElementById('keywords').value,
        fuzzy_description: document.getElementById('description').value || null
      };
      
      if (!searchData.name || !searchData.query_text) {
        showStatus('Please fill in search name and keywords', 'error');
        return;
      }
      
      const response = await apiCall('/searches/save', {
        method: 'POST',
        body: JSON.stringify(searchData)
      });
      
      showStatus('Search saved successfully! üíæ', 'success');
      await loadSavedSearches();
      
      // Clear form
      document.getElementById('search-form').reset();
      
    } catch (error) {
      console.error('Failed to save search:', error);
      showStatus('Failed to save search', 'error');
    }
  }

  // Run search
  async function runSearch(searchId) {
    try {
      showStatus('Running search... ‚è≥', 'info');
      
      const response = await apiCall('/searches/run', {
        method: 'POST',
        body: JSON.stringify({ searchId })
      });
      
      displaySearchResults(response.data);
      showStatus(`Found ${response.data.stats.new_posts} new posts! üéâ`, 'success');
      
    } catch (error) {
      console.error('Failed to run search:', error);
      showStatus('Failed to run search', 'error');
    }
  }

  // Display search results
  function displaySearchResults(data) {
    const container = document.getElementById('results-container');
    
    if (data.results.length === 0) {
      container.innerHTML = `
        <div class="text-center py-16">
          <div class="text-6xl mb-4">üéØ</div>
          <h3 class="text-xl font-semibold text-gray-600 mb-2">No new posts found</h3>
          <p class="text-gray-500">All posts have been previously reviewed</p>
        </div>
      `;
      return;
    }

    container.innerHTML = `
      <div class="mb-6">
        <div class="results-header">
          <h3 class="text-2xl font-bold text-gray-900">Search: ${data.search.name}</h3>
          <div class="text-lg text-gray-600">
            Found <span class="font-bold text-purple-600">${data.stats.total_found}</span> posts ‚Ä¢ 
            <span class="font-bold text-green-600">${data.stats.new_posts}</span> new ‚Ä¢ 
            <span class="font-bold text-gray-500">${data.stats.previously_seen}</span> previously seen
          </div>
        </div>
      </div>
      
      <div class="space-y-6">
        ${data.results.map(post => `
          <div class="post-card">
            <div class="flex justify-between items-start mb-4">
              <div class="flex-1">
                <h4 class="text-xl font-bold text-gray-900 mb-2">${post.author_name}</h4>
                <p class="text-gray-700 text-lg leading-relaxed mb-4">${post.preview_content}</p>
              </div>
              <div class="ml-6 text-right">
                <div class="text-3xl font-bold text-purple-600 mb-1">${post.engagement_score}</div>
                <div class="text-sm text-gray-500 mb-3">Score</div>
                <div class="text-sm text-gray-600">
                  ${post.likes} üëç ${post.comments} üí¨ ${post.reposts} üîÑ
                </div>
              </div>
            </div>
            
            <div class="flex gap-4">
              <button onclick="addToPipeline('${post.linkedin_url}')" class="pipeline-btn">
                ‚úÖ Add to Pipeline
              </button>
              <button onclick="markNotRelevant('${post.linkedin_url}')" class="not-relevant-btn">
                ‚ùå Not Relevant
              </button>
              <a href="${post.linkedin_url}" target="_blank" class="view-btn">
                üëÄ View on LinkedIn
              </a>
            </div>
          </div>
        `).join('')}
      </div>
    `;
  }

  // Add to pipeline
  async function addToPipeline(postUrl) {
    try {
      await apiCall('/posts/mark-action', {
        method: 'POST',
        body: JSON.stringify({
          post_linkedin_url: postUrl,
          action: 'added_to_pipeline'
        })
      });
      
      showStatus('Post added to pipeline! ‚úÖ', 'success');
      // Find and update the button
      event.target.textContent = '‚úÖ Added';
      event.target.disabled = true;
      event.target.classList.add('disabled');
      
    } catch (error) {
      console.error('Failed to add to pipeline:', error);
      showStatus('Failed to add to pipeline', 'error');
    }
  }

  // Mark not relevant
  async function markNotRelevant(postUrl) {
    try {
      await apiCall('/posts/mark-action', {
        method: 'POST',
        body: JSON.stringify({
          post_linkedin_url: postUrl,
          action: 'rejected_not_relevant'
        })
      });
      
      showStatus('Post marked as not relevant ‚ùå', 'success');
      // Remove the post from view
      event.target.closest('.post-card').style.opacity = '0.3';
      event.target.closest('.post-card').style.pointerEvents = 'none';
      
    } catch (error) {
      console.error('Failed to mark as not relevant:', error);
      showStatus('Failed to mark as not relevant', 'error');
    }
  }

  // Create dummy data for demonstration
  function loadDummyData() {
    const dummyData = {
      search: {
        name: "B2B SaaS Growth",
        id: 1
      },
      stats: {
        total_found: 25,
        new_posts: 8,
        previously_seen: 17
      },
      results: [
        {
          author_name: "Sarah Chen",
          preview_content: "Just hit $1M ARR after 18 months of building our B2B SaaS platform! Here's what I learned about customer acquisition that I wish I knew earlier. Thread üßµ",
          engagement_score: 94,
          likes: 342,
          comments: 89,
          reposts: 45,
          linkedin_url: "https://linkedin.com/posts/sarah-chen-growth"
        },
        {
          author_name: "Marcus Rodriguez",
          preview_content: "Stop wasting money on paid ads for your SaaS startup. I've helped 50+ B2B companies grow to 7-figures using these 5 organic growth strategies that actually work in 2024.",
          engagement_score: 87,
          likes: 289,
          comments: 67,
          reposts: 34,
          linkedin_url: "https://linkedin.com/posts/marcus-rodriguez-saas"
        },
        {
          author_name: "Emily Zhang",
          preview_content: "Why 90% of SaaS startups fail at customer onboarding (and how we fixed ours to increase retention by 40%). The biggest mistake founders make is assuming users will figure it out themselves.",
          engagement_score: 91,
          likes: 456,
          comments: 123,
          reposts: 67,
          linkedin_url: "https://linkedin.com/posts/emily-zhang-onboarding"
        },
        {
          author_name: "David Park",
          preview_content: "From 0 to 10,000 users in 6 months. Here's the exact growth playbook we used for our B2B automation tool. Spoiler: It wasn't about the product features.",
          engagement_score: 88,
          likes: 378,
          comments: 95,
          reposts: 52,
          linkedin_url: "https://linkedin.com/posts/david-park-growth"
        },
        {
          author_name: "Alex Thompson",
          preview_content: "I analyzed 100+ successful B2B SaaS pricing pages. Here are the 7 psychological triggers that convert browsers into buyers. Number 4 will surprise you.",
          engagement_score: 82,
          likes: 234,
          comments: 58,
          reposts: 29,
          linkedin_url: "https://linkedin.com/posts/alex-thompson-pricing"
        }
      ]
    };
    
    displaySearchResults(dummyData);
    showStatus('Loaded dummy data for preview! üéØ', 'info');
  }

  // Event listeners
  document.addEventListener('DOMContentLoaded', function() {
    // Load saved searches on page load
    loadSavedSearches();
    
    // Load dummy data for demonstration (remove this in production)
    setTimeout(() => {
      loadDummyData();
    }, 1000);
    
    // Tab switching
    document.getElementById('search-results-tab').addEventListener('click', () => switchTab('search-results'));
    document.getElementById('saved-searches-tab').addEventListener('click', () => switchTab('saved-searches'));
    
    // Search form submission (Run Search)
    document.getElementById('search-form').addEventListener('submit', function(e) {
      e.preventDefault();
      const searchData = {
        name: document.getElementById('search-name').value,
        query_text: document.getElementById('keywords').value,
        fuzzy_description: document.getElementById('description').value || null
      };
      
      if (!searchData.name || !searchData.query_text) {
        showStatus('Please fill in search name and keywords', 'error');
        return;
      }
      
      // Save and then run
      saveSearch().then(() => {
        // Find the newly created search and run it
        setTimeout(() => {
          const runButtons = document.querySelectorAll('.run-search-btn');
          if (runButtons.length > 0) {
            runButtons[0].click();
          }
        }, 1000);
      });
    });
    
    // Save only button
    document.getElementById('save-search').addEventListener('click', saveSearch);
    
    // Refresh searches button
    document.getElementById('refresh-searches').addEventListener('click', loadSavedSearches);
  });

  // Make functions global for onclick handlers
  window.runSearch = runSearch;
  window.addToPipeline = addToPipeline;
  window.markNotRelevant = markNotRelevant;
</script>

<style>
  /* Modern button styles */
  .save-btn {
    @apply px-8 py-4 bg-gray-100 hover:bg-gray-200 text-gray-800 font-bold rounded-2xl transition-all duration-200 transform hover:scale-105 hover:shadow-lg text-lg;
  }
  
  .run-btn {
    @apply px-8 py-4 bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white font-bold rounded-2xl transition-all duration-200 transform hover:scale-105 hover:shadow-xl text-lg;
  }
  
  .save-btn-small {
    @apply px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold rounded-lg transition-all duration-200 hover:shadow-md text-sm;
  }
  
  .run-btn-small {
    @apply px-4 py-2 bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white font-semibold rounded-lg transition-all duration-200 hover:shadow-lg text-sm;
  }
  
  .refresh-btn {
    @apply px-6 py-3 bg-blue-50 hover:bg-blue-100 text-blue-600 font-semibold rounded-xl transition-all duration-200 hover:shadow-md;
  }
  
  .run-search-btn {
    @apply px-6 py-3 bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white font-bold rounded-xl transition-all duration-200 transform hover:scale-105 hover:shadow-lg;
  }
  
  .pipeline-btn {
    @apply px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-bold rounded-xl transition-all duration-200 transform hover:scale-105 hover:shadow-lg;
  }
  
  .not-relevant-btn {
    @apply px-6 py-3 bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white font-bold rounded-xl transition-all duration-200 transform hover:scale-105 hover:shadow-lg;
  }
  
  .view-btn {
    @apply px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-bold rounded-xl transition-all duration-200 transform hover:scale-105 hover:shadow-lg no-underline;
  }
  
  /* Tab styles */
  .tab-button {
    @apply text-gray-600 border-b-4 border-transparent;
  }
  
  .tab-button.active {
    @apply text-purple-600 border-purple-600 bg-purple-50;
  }
  
  .tab-button:hover:not(.active) {
    @apply text-purple-500 bg-gray-50;
  }
  
  /* Card styles */
  .search-card {
    @apply bg-gradient-to-r from-purple-50 to-blue-50 border-2 border-purple-100 rounded-2xl p-6 mb-4 hover:shadow-lg transition-all duration-200 hover:border-purple-200;
  }
  
  .post-card {
    @apply bg-white border-2 border-gray-100 rounded-2xl p-6 hover:shadow-lg transition-all duration-200 hover:border-purple-200;
  }
  
  .results-header {
    @apply bg-gradient-to-r from-purple-50 to-blue-50 border-2 border-purple-100 rounded-2xl p-6;
  }
  
  .disabled {
    @apply opacity-50 cursor-not-allowed;
  }
</style>